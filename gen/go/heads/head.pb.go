// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.18.1
// source: head.proto

package heads

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SetTargetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theta float64 `protobuf:"fixed64,1,opt,name=theta,proto3" json:"theta,omitempty"`
	Speed float64 `protobuf:"fixed64,2,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *SetTargetIn) Reset() {
	*x = SetTargetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTargetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTargetIn) ProtoMessage() {}

func (x *SetTargetIn) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTargetIn.ProtoReflect.Descriptor instead.
func (*SetTargetIn) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{0}
}

func (x *SetTargetIn) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *SetTargetIn) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type SetActorIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *SetActorIn) Reset() {
	*x = SetActorIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActorIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActorIn) ProtoMessage() {}

func (x *SetActorIn) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActorIn.ProtoReflect.Descriptor instead.
func (*SetActorIn) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{1}
}

func (x *SetActorIn) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

type HeadState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position   int32                `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Target     int32                `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	Rotation   float64              `protobuf:"fixed64,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Controller string               `protobuf:"bytes,4,opt,name=controller,proto3" json:"controller,omitempty"`
	StepsAway  int32                `protobuf:"varint,5,opt,name=steps_away,json=stepsAway,proto3" json:"steps_away,omitempty"`
	Eta        *durationpb.Duration `protobuf:"bytes,6,opt,name=eta,proto3" json:"eta,omitempty"`
}

func (x *HeadState) Reset() {
	*x = HeadState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadState) ProtoMessage() {}

func (x *HeadState) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadState.ProtoReflect.Descriptor instead.
func (*HeadState) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{2}
}

func (x *HeadState) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *HeadState) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *HeadState) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *HeadState) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *HeadState) GetStepsAway() int32 {
	if x != nil {
		return x.StepsAway
	}
	return 0
}

func (x *HeadState) GetEta() *durationpb.Duration {
	if x != nil {
		return x.Eta
	}
	return nil
}

type ReadHallEffectSensorOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *ReadHallEffectSensorOut) Reset() {
	*x = ReadHallEffectSensorOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadHallEffectSensorOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHallEffectSensorOut) ProtoMessage() {}

func (x *ReadHallEffectSensorOut) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHallEffectSensorOut.ProtoReflect.Descriptor instead.
func (*ReadHallEffectSensorOut) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{3}
}

func (x *ReadHallEffectSensorOut) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type ReadMagnetSensorOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bx          float64 `protobuf:"fixed64,1,opt,name=bx,proto3" json:"bx,omitempty"`
	By          float64 `protobuf:"fixed64,2,opt,name=by,proto3" json:"by,omitempty"`
	Bz          float64 `protobuf:"fixed64,3,opt,name=bz,proto3" json:"bz,omitempty"`
	B           float64 `protobuf:"fixed64,4,opt,name=b,proto3" json:"b,omitempty"`
	Temperature float64 `protobuf:"fixed64,5,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *ReadMagnetSensorOut) Reset() {
	*x = ReadMagnetSensorOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_head_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMagnetSensorOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMagnetSensorOut) ProtoMessage() {}

func (x *ReadMagnetSensorOut) ProtoReflect() protoreflect.Message {
	mi := &file_head_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMagnetSensorOut.ProtoReflect.Descriptor instead.
func (*ReadMagnetSensorOut) Descriptor() ([]byte, []int) {
	return file_head_proto_rawDescGZIP(), []int{4}
}

func (x *ReadMagnetSensorOut) GetBx() float64 {
	if x != nil {
		return x.Bx
	}
	return 0
}

func (x *ReadMagnetSensorOut) GetBy() float64 {
	if x != nil {
		return x.By
	}
	return 0
}

func (x *ReadMagnetSensorOut) GetBz() float64 {
	if x != nil {
		return x.Bz
	}
	return 0
}

func (x *ReadMagnetSensorOut) GetB() float64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *ReadMagnetSensorOut) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

var File_head_proto protoreflect.FileDescriptor

var file_head_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x22, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0xc7, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x2b, 0x0a,
	0x03, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x17, 0x52, 0x65,
	0x61, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x75, 0x0a,
	0x13, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x4f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x62, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x62, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x62, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x32, 0xf1, 0x02, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x32, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x1a,
	0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x2e,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x09, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x68,
	0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x61, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x12,
	0x3e, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x12,
	0x27, 0x0a, 0x09, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x12, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_head_proto_rawDescOnce sync.Once
	file_head_proto_rawDescData = file_head_proto_rawDesc
)

func file_head_proto_rawDescGZIP() []byte {
	file_head_proto_rawDescOnce.Do(func() {
		file_head_proto_rawDescData = protoimpl.X.CompressGZIP(file_head_proto_rawDescData)
	})
	return file_head_proto_rawDescData
}

var file_head_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_head_proto_goTypes = []interface{}{
	(*SetTargetIn)(nil),             // 0: heads.SetTargetIn
	(*SetActorIn)(nil),              // 1: heads.SetActorIn
	(*HeadState)(nil),               // 2: heads.HeadState
	(*ReadHallEffectSensorOut)(nil), // 3: heads.ReadHallEffectSensorOut
	(*ReadMagnetSensorOut)(nil),     // 4: heads.ReadMagnetSensorOut
	(*durationpb.Duration)(nil),     // 5: google.protobuf.Duration
	(*Empty)(nil),                   // 6: heads.Empty
}
var file_head_proto_depIdxs = []int32{
	5, // 0: heads.HeadState.eta:type_name -> google.protobuf.Duration
	0, // 1: heads.head.set_target:input_type -> heads.SetTargetIn
	1, // 2: heads.head.set_actor:input_type -> heads.SetActorIn
	6, // 3: heads.head.status:input_type -> heads.Empty
	6, // 4: heads.head.find_zero:input_type -> heads.Empty
	6, // 5: heads.head.read_hall_effect_sensor:input_type -> heads.Empty
	6, // 6: heads.head.read_magnet_sensor:input_type -> heads.Empty
	6, // 7: heads.head.motor_off:input_type -> heads.Empty
	2, // 8: heads.head.set_target:output_type -> heads.HeadState
	2, // 9: heads.head.set_actor:output_type -> heads.HeadState
	2, // 10: heads.head.status:output_type -> heads.HeadState
	6, // 11: heads.head.find_zero:output_type -> heads.Empty
	3, // 12: heads.head.read_hall_effect_sensor:output_type -> heads.ReadHallEffectSensorOut
	4, // 13: heads.head.read_magnet_sensor:output_type -> heads.ReadMagnetSensorOut
	6, // 14: heads.head.motor_off:output_type -> heads.Empty
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_head_proto_init() }
func file_head_proto_init() {
	if File_head_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_head_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTargetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActorIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadHallEffectSensorOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_head_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMagnetSensorOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_head_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_head_proto_goTypes,
		DependencyIndexes: file_head_proto_depIdxs,
		MessageInfos:      file_head_proto_msgTypes,
	}.Build()
	File_head_proto = out.File
	file_head_proto_rawDesc = nil
	file_head_proto_goTypes = nil
	file_head_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HeadClient is the client API for Head service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeadClient interface {
	SetTarget(ctx context.Context, in *SetTargetIn, opts ...grpc.CallOption) (*HeadState, error)
	SetActor(ctx context.Context, in *SetActorIn, opts ...grpc.CallOption) (*HeadState, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeadState, error)
	FindZero(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ReadHallEffectSensor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadHallEffectSensorOut, error)
	ReadMagnetSensor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadMagnetSensorOut, error)
	MotorOff(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type headClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadClient(cc grpc.ClientConnInterface) HeadClient {
	return &headClient{cc}
}

func (c *headClient) SetTarget(ctx context.Context, in *SetTargetIn, opts ...grpc.CallOption) (*HeadState, error) {
	out := new(HeadState)
	err := c.cc.Invoke(ctx, "/heads.head/set_target", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headClient) SetActor(ctx context.Context, in *SetActorIn, opts ...grpc.CallOption) (*HeadState, error) {
	out := new(HeadState)
	err := c.cc.Invoke(ctx, "/heads.head/set_actor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeadState, error) {
	out := new(HeadState)
	err := c.cc.Invoke(ctx, "/heads.head/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headClient) FindZero(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.head/find_zero", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headClient) ReadHallEffectSensor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadHallEffectSensorOut, error) {
	out := new(ReadHallEffectSensorOut)
	err := c.cc.Invoke(ctx, "/heads.head/read_hall_effect_sensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headClient) ReadMagnetSensor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadMagnetSensorOut, error) {
	out := new(ReadMagnetSensorOut)
	err := c.cc.Invoke(ctx, "/heads.head/read_magnet_sensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headClient) MotorOff(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.head/motor_off", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadServer is the server API for Head service.
type HeadServer interface {
	SetTarget(context.Context, *SetTargetIn) (*HeadState, error)
	SetActor(context.Context, *SetActorIn) (*HeadState, error)
	Status(context.Context, *Empty) (*HeadState, error)
	FindZero(context.Context, *Empty) (*Empty, error)
	ReadHallEffectSensor(context.Context, *Empty) (*ReadHallEffectSensorOut, error)
	ReadMagnetSensor(context.Context, *Empty) (*ReadMagnetSensorOut, error)
	MotorOff(context.Context, *Empty) (*Empty, error)
}

// UnimplementedHeadServer can be embedded to have forward compatible implementations.
type UnimplementedHeadServer struct {
}

func (*UnimplementedHeadServer) SetTarget(context.Context, *SetTargetIn) (*HeadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTarget not implemented")
}
func (*UnimplementedHeadServer) SetActor(context.Context, *SetActorIn) (*HeadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActor not implemented")
}
func (*UnimplementedHeadServer) Status(context.Context, *Empty) (*HeadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedHeadServer) FindZero(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindZero not implemented")
}
func (*UnimplementedHeadServer) ReadHallEffectSensor(context.Context, *Empty) (*ReadHallEffectSensorOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHallEffectSensor not implemented")
}
func (*UnimplementedHeadServer) ReadMagnetSensor(context.Context, *Empty) (*ReadMagnetSensorOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMagnetSensor not implemented")
}
func (*UnimplementedHeadServer) MotorOff(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MotorOff not implemented")
}

func RegisterHeadServer(s *grpc.Server, srv HeadServer) {
	s.RegisterService(&_Head_serviceDesc, srv)
}

func _Head_SetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTargetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).SetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/SetTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).SetTarget(ctx, req.(*SetTargetIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Head_SetActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActorIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).SetActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/SetActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).SetActor(ctx, req.(*SetActorIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Head_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Head_FindZero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).FindZero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/FindZero",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).FindZero(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Head_ReadHallEffectSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).ReadHallEffectSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/ReadHallEffectSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).ReadHallEffectSensor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Head_ReadMagnetSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).ReadMagnetSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/ReadMagnetSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).ReadMagnetSensor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Head_MotorOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadServer).MotorOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.head/MotorOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadServer).MotorOff(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Head_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heads.head",
	HandlerType: (*HeadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "set_target",
			Handler:    _Head_SetTarget_Handler,
		},
		{
			MethodName: "set_actor",
			Handler:    _Head_SetActor_Handler,
		},
		{
			MethodName: "status",
			Handler:    _Head_Status_Handler,
		},
		{
			MethodName: "find_zero",
			Handler:    _Head_FindZero_Handler,
		},
		{
			MethodName: "read_hall_effect_sensor",
			Handler:    _Head_ReadHallEffectSensor_Handler,
		},
		{
			MethodName: "read_magnet_sensor",
			Handler:    _Head_ReadMagnetSensor_Handler,
		},
		{
			MethodName: "motor_off",
			Handler:    _Head_MotorOff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "head.proto",
}
