// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.18.1
// source: camera.proto

package heads

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DetectFacesIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFor *durationpb.Duration `protobuf:"bytes,1,opt,name=enable_for,json=enableFor,proto3" json:"enable_for,omitempty"`
}

func (x *DetectFacesIn) Reset() {
	*x = DetectFacesIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectFacesIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectFacesIn) ProtoMessage() {}

func (x *DetectFacesIn) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectFacesIn.ProtoReflect.Descriptor instead.
func (*DetectFacesIn) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{0}
}

func (x *DetectFacesIn) GetEnableFor() *durationpb.Duration {
	if x != nil {
		return x.EnableFor
	}
	return nil
}

type ListRecordingsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ListRecordingsIn) Reset() {
	*x = ListRecordingsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordingsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingsIn) ProtoMessage() {}

func (x *ListRecordingsIn) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingsIn.ProtoReflect.Descriptor instead.
func (*ListRecordingsIn) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{1}
}

func (x *ListRecordingsIn) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Size     int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *File) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListRecordingsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ListRecordingsOut) Reset() {
	*x = ListRecordingsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordingsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingsOut) ProtoMessage() {}

func (x *ListRecordingsOut) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingsOut.ProtoReflect.Descriptor instead.
func (*ListRecordingsOut) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{3}
}

func (x *ListRecordingsOut) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type StreamFileIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *StreamFileIn) Reset() {
	*x = StreamFileIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFileIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFileIn) ProtoMessage() {}

func (x *StreamFileIn) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFileIn.ProtoReflect.Descriptor instead.
func (*StreamFileIn) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{4}
}

func (x *StreamFileIn) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{5}
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

var File_camera_proto protoreflect.FileDescriptor

var file_camera_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x61, 0x63,
	0x65, 0x73, 0x49, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x22, 0x26,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x36,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x4f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0xc0, 0x01, 0x0a, 0x06,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e,
	0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x88,
	0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x75,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x1a, 0x10, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_camera_proto_rawDescOnce sync.Once
	file_camera_proto_rawDescData = file_camera_proto_rawDesc
)

func file_camera_proto_rawDescGZIP() []byte {
	file_camera_proto_rawDescOnce.Do(func() {
		file_camera_proto_rawDescData = protoimpl.X.CompressGZIP(file_camera_proto_rawDescData)
	})
	return file_camera_proto_rawDescData
}

var file_camera_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_camera_proto_goTypes = []interface{}{
	(*DetectFacesIn)(nil),       // 0: heads.DetectFacesIn
	(*ListRecordingsIn)(nil),    // 1: heads.ListRecordingsIn
	(*File)(nil),                // 2: heads.File
	(*ListRecordingsOut)(nil),   // 3: heads.ListRecordingsOut
	(*StreamFileIn)(nil),        // 4: heads.StreamFileIn
	(*FileChunk)(nil),           // 5: heads.FileChunk
	(*durationpb.Duration)(nil), // 6: google.protobuf.Duration
	(*Empty)(nil),               // 7: heads.Empty
}
var file_camera_proto_depIdxs = []int32{
	6, // 0: heads.DetectFacesIn.enable_for:type_name -> google.protobuf.Duration
	2, // 1: heads.ListRecordingsOut.files:type_name -> heads.File
	7, // 2: heads.camera.restart:input_type -> heads.Empty
	7, // 3: heads.camera.start_recording:input_type -> heads.Empty
	7, // 4: heads.camera.stop_recording:input_type -> heads.Empty
	0, // 5: heads.camera.detect_faces:input_type -> heads.DetectFacesIn
	1, // 6: heads.recorder.list_recordings:input_type -> heads.ListRecordingsIn
	4, // 7: heads.recorder.stream_file:input_type -> heads.StreamFileIn
	7, // 8: heads.camera.restart:output_type -> heads.Empty
	7, // 9: heads.camera.start_recording:output_type -> heads.Empty
	7, // 10: heads.camera.stop_recording:output_type -> heads.Empty
	7, // 11: heads.camera.detect_faces:output_type -> heads.Empty
	3, // 12: heads.recorder.list_recordings:output_type -> heads.ListRecordingsOut
	5, // 13: heads.recorder.stream_file:output_type -> heads.FileChunk
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_camera_proto_init() }
func file_camera_proto_init() {
	if File_camera_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_camera_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectFacesIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecordingsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecordingsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFileIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_camera_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_camera_proto_goTypes,
		DependencyIndexes: file_camera_proto_depIdxs,
		MessageInfos:      file_camera_proto_msgTypes,
	}.Build()
	File_camera_proto = out.File
	file_camera_proto_rawDesc = nil
	file_camera_proto_goTypes = nil
	file_camera_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraClient interface {
	Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	DetectFaces(ctx context.Context, in *DetectFacesIn, opts ...grpc.CallOption) (*Empty, error)
}

type cameraClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraClient(cc grpc.ClientConnInterface) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) StartRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/start_recording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) StopRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/stop_recording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) DetectFaces(ctx context.Context, in *DetectFacesIn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/detect_faces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
type CameraServer interface {
	Restart(context.Context, *Empty) (*Empty, error)
	StartRecording(context.Context, *Empty) (*Empty, error)
	StopRecording(context.Context, *Empty) (*Empty, error)
	DetectFaces(context.Context, *DetectFacesIn) (*Empty, error)
}

// UnimplementedCameraServer can be embedded to have forward compatible implementations.
type UnimplementedCameraServer struct {
}

func (*UnimplementedCameraServer) Restart(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedCameraServer) StartRecording(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (*UnimplementedCameraServer) StopRecording(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (*UnimplementedCameraServer) DetectFaces(context.Context, *DetectFacesIn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectFaces not implemented")
}

func RegisterCameraServer(s *grpc.Server, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Restart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).StartRecording(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).StopRecording(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_DetectFaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectFacesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).DetectFaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/DetectFaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).DetectFaces(ctx, req.(*DetectFacesIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heads.camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "restart",
			Handler:    _Camera_Restart_Handler,
		},
		{
			MethodName: "start_recording",
			Handler:    _Camera_StartRecording_Handler,
		},
		{
			MethodName: "stop_recording",
			Handler:    _Camera_StopRecording_Handler,
		},
		{
			MethodName: "detect_faces",
			Handler:    _Camera_DetectFaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera.proto",
}

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecorderClient interface {
	ListRecordings(ctx context.Context, in *ListRecordingsIn, opts ...grpc.CallOption) (*ListRecordingsOut, error)
	StreamFile(ctx context.Context, in *StreamFileIn, opts ...grpc.CallOption) (Recorder_StreamFileClient, error)
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) ListRecordings(ctx context.Context, in *ListRecordingsIn, opts ...grpc.CallOption) (*ListRecordingsOut, error) {
	out := new(ListRecordingsOut)
	err := c.cc.Invoke(ctx, "/heads.recorder/list_recordings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) StreamFile(ctx context.Context, in *StreamFileIn, opts ...grpc.CallOption) (Recorder_StreamFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Recorder_serviceDesc.Streams[0], "/heads.recorder/stream_file", opts...)
	if err != nil {
		return nil, err
	}
	x := &recorderStreamFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Recorder_StreamFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type recorderStreamFileClient struct {
	grpc.ClientStream
}

func (x *recorderStreamFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecorderServer is the server API for Recorder service.
type RecorderServer interface {
	ListRecordings(context.Context, *ListRecordingsIn) (*ListRecordingsOut, error)
	StreamFile(*StreamFileIn, Recorder_StreamFileServer) error
}

// UnimplementedRecorderServer can be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (*UnimplementedRecorderServer) ListRecordings(context.Context, *ListRecordingsIn) (*ListRecordingsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordings not implemented")
}
func (*UnimplementedRecorderServer) StreamFile(*StreamFileIn, Recorder_StreamFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFile not implemented")
}

func RegisterRecorderServer(s *grpc.Server, srv RecorderServer) {
	s.RegisterService(&_Recorder_serviceDesc, srv)
}

func _Recorder_ListRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordingsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).ListRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.recorder/ListRecordings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).ListRecordings(ctx, req.(*ListRecordingsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_StreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFileIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecorderServer).StreamFile(m, &recorderStreamFileServer{stream})
}

type Recorder_StreamFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type recorderStreamFileServer struct {
	grpc.ServerStream
}

func (x *recorderStreamFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Recorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heads.recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list_recordings",
			Handler:    _Recorder_ListRecordings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream_file",
			Handler:       _Recorder_StreamFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera.proto",
}
