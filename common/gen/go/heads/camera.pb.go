// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.18.1
// source: camera.proto

package heads

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_camera_proto protoreflect.FileDescriptor

var file_camera_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xb4, 0x01, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x26,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x0c, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0c,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x63, 0x6b, 0x74, 0x6f, 0x70,
	0x75, 0x73, 0x2f, 0x74, 0x68, 0x65, 0x68, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_camera_proto_goTypes = []interface{}{
	(*Empty)(nil), // 0: heads.Empty
	(*Event)(nil), // 1: heads.Event
}
var file_camera_proto_depIdxs = []int32{
	0, // 0: heads.camera.events:input_type -> heads.Empty
	0, // 1: heads.camera.restart:input_type -> heads.Empty
	0, // 2: heads.camera.start_recording:input_type -> heads.Empty
	0, // 3: heads.camera.stop_recording:input_type -> heads.Empty
	1, // 4: heads.camera.events:output_type -> heads.Event
	0, // 5: heads.camera.restart:output_type -> heads.Empty
	0, // 6: heads.camera.start_recording:output_type -> heads.Empty
	0, // 7: heads.camera.stop_recording:output_type -> heads.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_camera_proto_init() }
func file_camera_proto_init() {
	if File_camera_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_camera_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_camera_proto_goTypes,
		DependencyIndexes: file_camera_proto_depIdxs,
	}.Build()
	File_camera_proto = out.File
	file_camera_proto_rawDesc = nil
	file_camera_proto_goTypes = nil
	file_camera_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraClient interface {
	Events(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Camera_EventsClient, error)
	Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type cameraClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraClient(cc grpc.ClientConnInterface) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) Events(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Camera_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Camera_serviceDesc.Streams[0], "/heads.camera/events", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Camera_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type cameraEventsClient struct {
	grpc.ClientStream
}

func (x *cameraEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraClient) Restart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) StartRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/start_recording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) StopRecording(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/heads.camera/stop_recording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
type CameraServer interface {
	Events(*Empty, Camera_EventsServer) error
	Restart(context.Context, *Empty) (*Empty, error)
	StartRecording(context.Context, *Empty) (*Empty, error)
	StopRecording(context.Context, *Empty) (*Empty, error)
}

// UnimplementedCameraServer can be embedded to have forward compatible implementations.
type UnimplementedCameraServer struct {
}

func (*UnimplementedCameraServer) Events(*Empty, Camera_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (*UnimplementedCameraServer) Restart(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedCameraServer) StartRecording(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (*UnimplementedCameraServer) StopRecording(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}

func RegisterCameraServer(s *grpc.Server, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServer).Events(m, &cameraEventsServer{stream})
}

type Camera_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type cameraEventsServer struct {
	grpc.ServerStream
}

func (x *cameraEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Camera_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Restart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).StartRecording(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heads.camera/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).StopRecording(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heads.camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "restart",
			Handler:    _Camera_Restart_Handler,
		},
		{
			MethodName: "start_recording",
			Handler:    _Camera_StartRecording_Handler,
		},
		{
			MethodName: "stop_recording",
			Handler:    _Camera_StopRecording_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "events",
			Handler:       _Camera_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera.proto",
}
