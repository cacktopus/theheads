{"version":3,"file":"main.f2ad94e158928ae2093a.hot-update.js","sources":["/Users/aj/Work/code/heads/heads2/heads/boss-ui/src/components/Menu.js"],"sourcesContent":["// https://redux.js.org/basics/exampletodolist#entry-point\n// http://localhost:3000/\n\nimport React from 'react'\n// import { fromJS } from 'immutable';\n// import Slider, { Range } from 'rc-slider';\nimport Slider from 'rc-slider';\n\nlet exportSceneMsgTimeout;\n\nlet defaultWebsocketUrl;\nlet defaultSceneUrl;\nif (window.location.hostname === \"localhost\" && window.location.port === \"3000\") {\n    defaultWebsocketUrl = \"ws://localhost:8081/ws\";\n    defaultSceneUrl = \"json/temp.json\";\n} else {\n    defaultWebsocketUrl = 'ws://' + window.location.hostname + \":\" + window.location.port + '/ws';\n    defaultSceneUrl = \"/installation/dev/scene.json\";\n}\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sceneUrl: defaultSceneUrl,\n            // sceneUrl : \"/build/json/temp.json\",\n            websocketUrl: defaultWebsocketUrl, //\"ws://localhost:8081/ws\"\n            // sceneUrl : \"/json/temp.json\"\n            // sceneUrl : \"/json/temp2.json\"\n        };\n\n        this.addStand = this.addStand.bind(this);\n        this.addFocalPoint = this.addFocalPoint.bind(this);\n        this.setLoadSceneUrl = this.setLoadSceneUrl.bind(this);\n        this.loadScene = this.loadScene.bind(this);\n        this.loadTempSceneJson = this.loadTempSceneJson.bind(this);\n        this.loadRegSceneJson = this.loadRegSceneJson.bind(this);\n\n        this.addNewCamera = this.addNewCamera.bind(this);\n        this.removeCurrentCamera = this.removeCurrentCamera.bind(this);\n        this.exportSceneToJSON = this.exportSceneToJSON.bind(this);\n        this.setScale = e => { props.setScale(e.target.value) };\n        this.setTranslateX = e => { props.setTranslateX(e.target.value) };\n        this.setTranslateY = e => { props.setTranslateY(e.target.value) };\n\n        // Focal Point\n        this.addFocalPoint = this.addFocalPoint.bind(this);\n\n        this.setWebsocketUrl = e => { this.setState({ websocketUrl: e.target.value }) };\n        this.websocketConnect = this.websocketConnect.bind(this);\n        this.websocketDisconnect = this.websocketDisconnect.bind(this);\n        this.websocketLoadLocalhostUrl = this.websocketLoadLocalhostUrl.bind(this);\n        this.websocketLoadOtherUrl = this.websocketLoadOtherUrl.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadScene();\n        this.websocketConnect();\n    }\n\n    addStand() {\n        this.props.addStand({})\n    }\n\n    addFocalPoint() {\n        this.props.addFocalPoint({})\n    }\n\n    setLoadSceneUrl(e) {\n        const sceneUrl = e.target.value;\n        this.setState({ sceneUrl });\n    }\n\n    exportSceneToJSON() {\n        var stands = this.props.stands.toJS();\n\n        var scene = JSON.stringify({ name: \"export\", stands });\n\n        // document.create\n        var el = document.getElementById(\"clipboard-input\");\n        el.value = scene;\n        el.select();\n        document.execCommand(\"copy\");\n\n        const msg = document.getElementById(\"clipboard-msg\");\n        msg.innerText = \"Copied\";\n        clearTimeout(exportSceneMsgTimeout);\n\n        exportSceneMsgTimeout = setTimeout(() => {\n            msg.innerText = \"\";\n        }, 1000);\n    }\n\n    loadScene() {\n        this.props.loadSceneFromUrl(this.state.sceneUrl);\n    }\n\n    loadTempSceneJson() {\n        this.setState({\n            sceneUrl: \"json/temp.json\"\n        })\n    }\n\n    loadRegSceneJson() {\n        this.setState({\n            sceneUrl: \"/installation/dev/scene.json\"\n        })\n    }\n\n    addNewCamera() {\n        this.props.cameraAddNew(this.props.selectedStandIndex);\n    }\n\n    removeCurrentCamera() {\n        console.log('c_ 12');\n        this.props.cameraRemove(this.props.selectedStandIndex, this.props.selectedCameraIndex);\n    }\n\n    // Web socket connection\n    websocketConnect() {\n        this.props.websocketConnect(this.state.websocketUrl);\n    }\n\n    websocketDisconnect() {\n        this.props.websocketDisconnect();\n    }\n\n    websocketLoadLocalhostUrl() {\n        this.setState({\n            websocketUrl: \"ws://localhost:8081/ws\"\n        })\n    }\n\n    websocketLoadOtherUrl() {\n\n    }\n\n    render() {\n        // {\n        //     \"name\": \"stand0\",\n        //     \"pos\": {\n        //         \"x\": 54,\n        //         \"y\": 13\n        //     },\n        //     \"rot\": 0,\n        //     \"cameras\": [\n        //         {\n        //             \"name\": \"camera0\",\n        //             \"pos\": {\n        //                 \"x\": 0.1,\n        //                 \"y\": 0\n        //             },\n        //             \"rot\": 0,\n        //             \"fov\": 60,\n        //             \"description\": \"Raspberry Pi PiNoir Camera V2 Video Module\"\n        //         }\n        //     ],\n        //     \"heads\": [\n        //         {\n        //             \"name\": \"head0\",\n        //             \"pos\": {\n        //                 \"x\": 0,\n        //                 \"y\": 0\n        //             },\n        //             \"rot\": 0\n        //         }\n        //     ]\n        // }\"\n\n        const standSchema = {\n            \"name\": { type: \"text\" },\n            \"pos\": {\n                type: \"pos\"\n                // type: \"obj\",\n                // obj : { \n                //     x: {type: 'number'},\n                //     y: {type: 'number'}\n                // }\n            },\n            \"rot\": { type: \"number\", min: -1 * Math.PI, max: Math.PI },\n        };\n\n        const cameraSchema = {\n            \"name\": { type: \"text\" },\n            \"pos\": {\n                type: \"pos\"\n                // type: \"obj\",\n                // obj : { \n                //     x: {type: 'number'},\n                //     y: {type: 'number'}\n                // }\n            },\n            \"rot\": { type: \"number\", min: -1 * Math.PI, max: Math.PI },\n            \"fov\": { type: \"number\" },\n            \"description\": { type: \"text\" }\n\n            // \"name\" : {type: \"text\"},\n            // \"pos\": {\n            //     type: \"pos\"\n            //     // type: \"obj\",\n            //     // obj: {\n            //     //     \"x\": { type: \"number\" },\n            //     //     \"y\": { type: \"number\" }\n            //     // }\n            // },\n            // \"rot\": { type: \"number\", min: -1 * Math.PI, max: Math.PI },\n            // \"fov\": { type: \"number\" },\n            // \"description\": { type: \"text\" }\n        };\n\n        const headSchema = {\n            \"name\": { type: \"text\" },\n            \"pos\": {\n                type: \"pos\"\n                // type: \"obj\",\n                // obj: {\n                //     \"x\": { type: \"number\" },\n                //     \"y\": { type: \"number\" }\n                // }\n            },\n            \"rot\": { type: \"number\", min: -1 * Math.PI, max: Math.PI },\n        };\n\n        // `fieldNames` param is of type array. e.g. fieldNames = [0, \"heads\", 0, \"rot\"]\n        const inputHandler = fieldNames => {\n\n            return (e) => {\n                const value = e.target.value;\n\n                this.props.standSetInFields(this.props.selectedStandIndex, fieldNames, value);\n                // this.props.standSetField(this.props.selectedStandIndex, fieldName, value);\n            }\n        }\n\n        // // `fieldNames` param is of type array. e.g. fieldNames = [0, \"heads\", 0, \"rot\"]\n        // const inputHandlerForFieldNames = fieldNames => {\n        //     return (e) => {\n        //         const value = e.target.value;\n        //         this.props.standSetInFields(this.props.selectedStandIndex, fieldNames, value);\n        //     }\n        // }\n\n        const posHandler = (fieldNames, axis) => {\n            return (e) => {\n                let value = parseFloat(e.target.value);\n                if (isNaN(value)) {\n                    value = \"\";\n                }\n\n                // console.log(\"====\", this.props.selectedStandIndex, fieldName, axis, value);\n                this.props.standSetInFields(this.props.selectedStandIndex, [...fieldNames, axis], value);\n            }\n        }\n\n        // const getTextInput = ({label, name, value, onChange}) => {\n        const getTextInput = ({ fieldName, fieldVal, parentFieldNames }) => {\n            return getInput({ fieldName, fieldVal, type: \"text\", parentFieldNames });\n        }\n\n        const getNumberInput = ({ fieldName, fieldVal, parentFieldNames }) => {\n            return getInput({ fieldName, fieldVal, type: \"number\", parentFieldNames });\n        }\n\n        const getPosInput = ({ fieldName, fieldVal, parentFieldNames }) => {\n            const { x, y } = fieldVal && fieldVal.toJS ? fieldVal.toJS() : { x: 0, y: 0 };\n            const fieldNameX = `${fieldName}.x`;\n            const fieldNameY = `${fieldName}.y`;\n\n            window.c_sdfa2 = { fieldName, fieldVal };\n\n            const fieldNames = [...parentFieldNames, fieldName];\n\n            return (\n                <div className=\"Menu-form-posType\">\n                    <label >X</label>\n                    <input className=\"Menu-form-posType-X\" name={fieldNameX} type=\"number\" onChange={posHandler(fieldNames, \"x\")} value={x} />\n                    <label style={{ minWidth: 0 }}>Y</label>\n                    <input className=\"Menu-form-posType-Y\" name={fieldNameY} type=\"number\" onChange={posHandler(fieldNames, \"y\")} value={y} />\n                </div>\n            );\n        }\n\n        const getInput = ({ fieldName, fieldVal, type, parentFieldNames }) => {\n            const fieldNames = [...parentFieldNames, fieldName];\n            return (\n                <div>\n                    <label htmlFor={fieldName}>{fieldName}</label>\n                    <input name={fieldName} type={type} onChange={inputHandler(fieldNames)} value={fieldVal} />\n                </div>\n            )\n        }\n\n        // Got through each for schema... then get associated to object\n        // The parent field names is in case the onChange needs to pass along more field names for the stand\n        const getInputsBySchema = ({ schema, immutableObj, parentFieldNames = [] }) => {\n            if (!immutableObj || !immutableObj.get) {\n                return null;\n            }\n\n            var fields = Object.keys(schema);\n\n            return fields.map(fieldName => {\n                const fieldVal = immutableObj.get(fieldName);\n                // const type = fields[fieldName] ? fields[fieldName].type : \"\";\n\n                // console.log(\"fieldVal\", fieldVal)\n\n                switch (schema[fieldName].type) {\n                    case \"text\":\n                        return <span key={fieldName}>{getTextInput({ fieldName, fieldVal, parentFieldNames })}</span>\n                    case \"number\":\n                        return <span key={fieldName}>{getNumberInput({ fieldName, fieldVal, parentFieldNames })}</span>\n                    // case \"array\":\n                    //     break;\n                    case \"pos\":\n                        return <span key={fieldName}>{getPosInput({ fieldName, fieldVal, parentFieldNames })}</span>\n                    case \"obj\":\n                        return <div key={fieldName}>OBJ - {fieldName}</div>\n                    default:\n                        return null;\n                }\n            })\n        }\n\n        // const standSchema = {\n        //     \"name\": { type: \"text\" },\n        //     \"pos\": { type: \"obj\", obj : { x: {type: 'number', y: {type: 'number'}}} },\n        //     \"rot\": { type: \"number\"},\n        //     \"cameras\": {\n        //         type: \"array\", \n        //         arrayObj : {\n        //             \"name\" : {type: \"text\"},\n        //             \"pos\": {\n        //                 type: \"obj\",\n        //                 obj: {\n        //                     \"x\": { type: \"number\" },\n        //                     \"y\": { type: \"number\" }\n        //                 }\n        //             },\n        //             \"rot\": { type: \"number\" },\n        //             \"fov\": { type: \"number\" },\n        //             \"description\": { type: \"text\" }\n        //         }\n        //     },\n        //     \"heads\": {\n        //         type: \"array\",\n        //         arrayObj : {\n        //             \"name\" : {type: \"text\"},\n        //             \"pos\": {\n        //                 type: \"obj\",\n        //                 obj: {\n        //                     \"x\": { type: \"number\" },\n        //                     \"y\": { type: \"number\" }\n        //                 }\n        //             },\n        //             \"rot\": { type: \"number\" },\n        //         }\n        //     }\n        // };\n\n        const stands = this.props.stands;\n        const menu = this.props.menu;\n        const selectedStandIndex = this.props.selectedStandIndex;\n        const selectedHeadIndex = menu.get(\"selectedHeadIndex\");\n        const selectedCameraIndex = menu.get(\"selectedCameraIndex\");\n        const scale = menu.get(\"scale\");\n        const translateX = menu.getIn([\"translate\", \"x\"]);\n        const translateY = menu.getIn([\"translate\", \"y\"]);\n\n        const getStandInfo = () => {\n            if (stands.size > 0 && stands.get) {\n                const stand = stands.get(selectedStandIndex);\n                if (stand) {\n                    return {\n                        selectedStand: stand,\n                        cameras: stand && stand.get ? stand.get(\"cameras\") : [],\n                        heads: stand && stand.get ? stand.get(\"heads\") : []\n                    }\n                }\n            }\n\n            return {\n                selectedStand: {},\n                cameras: [],\n                heads: []\n            };\n        }\n\n        const { selectedStand, cameras, heads } = getStandInfo();\n\n        let standOptions = stands.map((stand, i) => {\n            return <option key={i} value={i}>{i} - {stand.get(\"name\")}</option>\n        });\n\n        let defaultStandOption = <option key={\"no selection\"} value=\"\">None selected</option>;\n\n        standOptions = ([defaultStandOption]).concat(standOptions);\n\n        let cameraOptions;\n        if (cameras) {\n            cameraOptions = cameras.map((camera, i) => {\n                return <option key={i} value={i}>{i} - {camera.get(\"name\")}</option>\n            });\n        }\n\n        const headOptions = heads.map((head, i) => {\n            return <option key={i} value={i}>{i} - {head.get(\"name\")}</option>\n        });\n\n        const getStandForm = () => {\n            return getInputsBySchema({ schema: standSchema, immutableObj: selectedStand });\n        }\n\n        const getHeadForm = () => {\n            const selectedHead = heads && heads.get ? heads.get(selectedHeadIndex) : undefined;\n            if (selectedHead !== undefined) {\n                return getInputsBySchema({ schema: headSchema, immutableObj: selectedHead, parentFieldNames: [\"heads\", selectedHeadIndex] });\n            } else {\n                return undefined;\n            }\n        }\n\n        const getCameraForm = () => {\n            const selectedCamera = cameras && cameras.get ? cameras.get(selectedCameraIndex) : undefined;\n            if (selectedCamera !== undefined) {\n                return getInputsBySchema({ schema: cameraSchema, immutableObj: selectedCamera, parentFieldNames: [\"cameras\", selectedCameraIndex] });\n            } else {\n                return undefined;\n            }\n        }\n\n        const standInputs = getStandForm();\n\n        const headInputs = getHeadForm();\n\n        const cameraInputs = getCameraForm();\n\n        const isStandRotatesHidden = this.props.menu.get(\"isStandRotatesHidden\");\n        const isCameraRotatesHidden = this.props.menu.get(\"isCameraRotatesHidden\");\n        const isHeadRotatesHidden = this.props.menu.get(\"isHeadRotatesHidden\");\n\n        const isForceShowStandRotatesOnSelect = this.props.menu.get(\"isForceShowStandRotatesOnSelect\");\n        const isForceShowHeadRotatesOnSelect = this.props.menu.get(\"isForceShowHeadRotatesOnSelect\");\n        const isForceShowCameraRotatesOnSelect = this.props.menu.get(\"isForceShowCameraRotatesOnSelect\");\n\n        const transformLabelStyles = { width: 120 };\n\n        // Websocket connection buttons\n        const websocketStatus = this.props.menu.get(\"websocketStatus\");\n        let websocketConnectionButton;\n\n        if (websocketStatus === \"open\") {\n            websocketConnectionButton = <button onClick={this.websocketDisconnect}>Disconnect</button>\n        } else if (websocketStatus === \"connecting\") {\n            websocketConnectionButton = <button disabled={true}>Connecting</button>\n        } else {\n            websocketConnectionButton = <button onClick={this.websocketConnect}>Connect</button>\n        }\n\n        // Inputs for stand, head, camera\n        let standDetails;\n\n        if (selectedStandIndex >= 0) {\n            standDetails = (\n                <div>\n                    <div className=\"Menu-section Menu-section--stand\">\n                        <div>\n                            <label className=\"Menu-form-label\">Stand</label><br />\n                            <select value={selectedStandIndex} onChange={(e) => this.props.selectStand(e.target.value)}>\n                                {standOptions}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"Menu-section Menu-section--standInputs\" >\n                        {standInputs}\n                    </div>\n                    <div className=\"Menu-section Menu-section--camera\" style={{ paddingLeft: \"20px\", float: \"left\" }}>\n                        <div>\n                            <label className=\"Menu-form-label\">Camera</label><br />\n                            <select value={selectedCameraIndex} onChange={(e) => this.props.selectCamera(e.target.value)}>\n                                {cameraOptions}\n                            </select>\n                        </div>\n                        <div>\n                            <button onClick={this.addNewCamera}>Add New</button>\n                        </div>\n                        <div>\n                            <button onClick={this.removeCurrentCamera}>Remove Current</button>\n                        </div>\n                    </div>\n                    <div className=\"Menu-section Menu-section--cameraInputs\" >\n                        {cameraInputs}\n                    </div>\n\n                    <div className=\"Menu-section Menu-section--head\" style={{ paddingLeft: \"20px\", float: \"left\" }}>\n                        <div>\n                            <label className=\"Menu-form-label\">Head</label><br />\n                            <select value={this.props.menu.get(\"selectedHeadIndex\")} onChange={(e) => this.props.selectHead(e.target.value)}>\n                                {headOptions}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"Menu-section Menu-section--headInputs\" >\n                        {headInputs}\n                    </div>\n                </div>\n            );\n        }\n\n        // Focal Point details\n        let focalPointDetails;\n\n        return (\n            <div className=\"Menu\">\n                <div className=\"Menu-zoomer\">\n                    <div className=\"Menu-zoomer-scale\">\n                        <Slider\n                            min={1}\n                            max={400}\n                            vertical={true}\n                            onChange={this.props.setScale}\n                            value={parseFloat(scale)}\n                        />\n                    </div>\n                    <div className=\"Menu-zoomer-translateY\">\n                        <Slider\n                            min={-3000}\n                            max={3000}\n                            vertical={true}\n                            onChange={val => this.props.setTranslateY(val)}\n                            value={parseFloat(translateY)}\n                        />\n                    </div>\n                    <div className=\"Menu-zoomer-translateX\">\n                        <Slider\n                            min={-1500}\n                            max={3000}\n                            onChange={this.props.setTranslateX}\n                            value={parseFloat(translateX)}\n                        />\n                    </div>\n                </div>\n                <div>\n                    <div className=\"Menu-section\">\n                        <div className=\"Menu-bigButton\" onClick={this.addStand}>Add Stand</div>\n                    </div>\n                    <div className=\"Menu-section\">\n                        <div className=\"Menu-bigButton\" onClick={this.addFocalPoint}>Add Focal Point</div>\n                    </div>\n                    <div className=\"Menu-section\">\n                        {/* <span onClick={ajaxUrl.bion} style={{cursor: \"pointer\"}}>restart</span> <span style={{cursor: \"pointer\"}}>stop</span> */}\n                        <a href={`http://${document.location.hostname}:8000/restart?service=boss`} target=\"_blank\" style={{cursor: \"pointer\"}}>restart</a>&nbsp; &nbsp; &nbsp;\n                        <a href={`http://${document.location.hostname}:8000/stop?service=boss`} target=\"_blank\" style={{marginLeft: 20, cursor: \"pointer\"}}>stop</a>\n                    </div>\n                    {standDetails}\n                    {focalPointDetails}\n                    <div style={{ clear: \"both\" }}></div>\n                </div>\n                <div style={{ marginTop: 15 }}>\n                    <div style={{ display: \"inline-block\", background: \"#FBB\", padding: \"5px\" }}>\n                        <div className=\"Menu-loadScene\">\n                            <label>Import Scene:</label>\n                            <input style={{ width: 200 }} placeholder=\"Scene Url\" value={this.state.sceneUrl} onChange={this.setLoadSceneUrl} />&nbsp;\n                            <button onClick={this.loadScene}>Load</button>&nbsp;<button onClick={this.loadTempSceneJson}>Temp</button>&nbsp;<button onClick={this.loadRegSceneJson}>Reg</button>\n                        </div><div className=\"Menu-getScene\">\n                            <label>Export Scene:</label>\n                            <input id=\"clipboard-input\" style={{ width: 200 }} placeholder=\"This will be populated on 'Copy to clipboard'.\" />&nbsp;\n                            <button onClick={this.exportSceneToJSON}>Copy to clipboard</button>\n                            <span id=\"clipboard-msg\"></span>\n                        </div>\n                    </div>\n                    <div style={{ display: \"inline-block\", background: \"#BFB\", padding: \"5px\" }}>\n                        <div className=\"Menu-scaleScene\">\n                            <label style={transformLabelStyles}>Scale Scene:</label>\n                            <input type=\"number\" style={{ width: 100 }} placeholder=\"Scale\" value={scale} onChange={this.setScale} />&nbsp;\n                    </div>\n                        <div className=\"Menu-translateScene\">\n                            <label style={transformLabelStyles}>Translate Scene:</label>\n                            <input type=\"number\" style={{ width: 45 }} placeholder=\"x\" value={translateX} onChange={this.setTranslateX} />&nbsp;\n                            <input type=\"number\" style={{ width: 45 }} placeholder=\"y\" value={translateY} onChange={this.setTranslateY} />&nbsp;\n                        </div>\n                    </div>\n                    <div style={{ display: \"inline-block\", background: \"#BBF\", padding: \"5px\" }}>\n                        <div className=\"Menu-websocket\">\n                            <label>Websocket Url!:</label><span id=\"websocket-msg\"></span><br />\n                            <input type=\"text\" style={{ width: 200 }} placeholder=\"Websocket Url\" value={this.state.websocketUrl} onChange={this.setWebsocketUrl} />&nbsp;\n\n                            {websocketConnectionButton}&nbsp;\n                            <button onClick={this.websocketLoadLocalhostUrl}>Autofill localhost:8081</button>&nbsp;\n                            {/* <button onClick={this.websocketLoadOtherUrl}>Other URL</button>&nbsp; */}\n                        </div>\n                    </div>\n                </div>\n                <div style={{ display: \"inline-block\", background: \"#FFFFEE\", padding: \"5px\" }}>\n                    Show Rotates:&nbsp;\n                    {/* <button onClick={this.props.menuToggleHideHeadRotates}>{isStandRotatesHidden ? \"Show\" : \"Hide\"} Stand</button>\n                    <button onClick={this.props.menuToggleHideCameraRotates}>{isCameraRotatesHidden ? \"Show\" : \"Hide\"} Camera</button>\n                    <button onClick={this.props.menuToggleHideStandRotates}>{isHeadRotatesHidden ? \"Show\" : \"Hide\"} Head</button>\n                    <button onClick={this.props.menuToggleHideStandRotates}>{isHeadRotatesHidden ? \"Show\" : \"Hide\"} Head</button> */}\n                    Stand<input name=\"Stand\" type=\"checkbox\" checked={!isStandRotatesHidden} onChange={this.props.menuToggleHideStandRotates} />&nbsp;\n                    Head<input name=\"Head\" type=\"checkbox\" checked={!isHeadRotatesHidden} onChange={this.props.menuToggleHideHeadRotates} />&nbsp;\n                    Camera<input name=\"Camera\" type=\"checkbox\" checked={!isCameraRotatesHidden} onChange={this.props.menuToggleHideCameraRotates} />&nbsp;\n                    <button onClick={this.props.menuShowAllRotates}>Show All</button>\n                    <button onClick={this.props.menuHideAllRotates}>Hide All</button>\n                    {/* <button>Toggle visuals</button> */}\n                </div>\n                <div style={{ display: \"inline-block\", background: \"#FFEEFF\", padding: \"5px\" }}>\n                    Force Show On Select:&nbsp;\n                    Stand<input name=\"Stand\" type=\"checkbox\" checked={isForceShowStandRotatesOnSelect} onChange={this.props.menuToggleForceShowStandRotatesOnSelect} />&nbsp;\n                    Head<input name=\"Head\" type=\"checkbox\" checked={isForceShowHeadRotatesOnSelect} onChange={this.props.menuToggleForceShowHeadRotatesOnSelect} />&nbsp;\n                    Camera<input name=\"Camera\" type=\"checkbox\" checked={isForceShowCameraRotatesOnSelect} onChange={this.props.menuToggleForceShowCameraRotatesOnSelect} />&nbsp;\n                    <button onClick={this.props.menuEnableForceShowAllRotatesOnSelect}>Show All</button>\n                    <button onClick={this.props.menuDisableForceShowAllRotatesOnSelect}>Hide All</button>\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAhCA;AAiCA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AAAA;AAAA;AAVA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAZA;AA4BA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAZA;AAcA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA1PA;AAAA;AAAA;AAAA;AACA;AA4PA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArlBA;AACA;;;;;A","sourceRoot":""}